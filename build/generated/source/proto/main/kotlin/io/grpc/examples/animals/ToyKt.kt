// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: dog.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.grpc.examples.animals;

@kotlin.jvm.JvmName("-initializetoy")
public inline fun toy(block: io.grpc.examples.animals.ToyKt.Dsl.() -> kotlin.Unit): io.grpc.examples.animals.Toy =
  io.grpc.examples.animals.ToyKt.Dsl._create(io.grpc.examples.animals.Toy.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `animals.Toy`
 */
public object ToyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.grpc.examples.animals.Toy.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.grpc.examples.animals.Toy.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.grpc.examples.animals.Toy = _builder.build()

    /**
     * `string name = 1;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * `string name = 1;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * `.animals.Color color = 2;`
     */
    public var color: io.grpc.examples.animals.Color
      @JvmName("getColor")
      get() = _builder.getColor()
      @JvmName("setColor")
      set(value) {
        _builder.setColor(value)
      }
    /**
     * `.animals.Color color = 2;`
     */
    public fun clearColor() {
      _builder.clearColor()
    }
    /**
     * `.animals.Color color = 2;`
     * @return Whether the color field is set.
     */
    public fun hasColor(): kotlin.Boolean {
      return _builder.hasColor()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun io.grpc.examples.animals.Toy.copy(block: io.grpc.examples.animals.ToyKt.Dsl.() -> kotlin.Unit): io.grpc.examples.animals.Toy =
  io.grpc.examples.animals.ToyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.grpc.examples.animals.ToyOrBuilder.colorOrNull: io.grpc.examples.animals.Color?
  get() = if (hasColor()) getColor() else null

